type Organization
  @model
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read] }
    ]
  ) {
  id: ID!
  title: String
  description: String
  ipRangeRegex: String
  programs: [Program] @connection(keyName: "byOrganization", fields: ["id"])
}

type Program
  @model
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read] }
    ]
  )
  @key(
    name: "byOrganization"
    fields: ["orgID", "name"]
    queryField: "programsByOrganization"
  ) {
  id: ID!
  name: String!
  orgID: ID!
  description: String
  memberships: [Membership] @connection(keyName: "byProgram", fields: ["id"])
}

# connection between users and programs
type Membership
  @model
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read] }
    ]
  )
  @key(name: "byProgram", fields: ["programId", "userId"])
  @key(name: "byUser", fields: ["userId", "programId"]) {
  id: ID!
  role: Role!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  programId: ID!
  program: Program! @connection(fields: ["programId"])
}

type Procedure
  @model
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  programs: [ProgramProcedure]
    @connection(keyName: "byProcedure", fields: ["id"])
}

type User
  @model
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read, update] }
    ]
  )
  @key(name: "ByEmail", fields: ["email"], queryField: "usersByEmail")
  @key(name: "ByNPI", fields: ["npi"], queryField: "usersByNPI")
  @key(name: "ByOrg", fields: ["orgID"]) {
  id: ID!
  orgID: ID
  userName: String
  email: String
  phone: String
  firstName: String
  lastName: String
  npi: Int
  pgy: Int
  isRater: Boolean
  memberships: [Membership] @connection(keyName: "byUser", fields: ["id"])
  settings: UserSettings
  # TODO - If we want to log any more events, move to a UserEvents object
  lastLogin: AWSDateTime
}

type UserSettings {
  receiveWeeklyNewEvaluationsEmail: Boolean
}

type EvaluationResponse
  @model(mutations: null)
  @auth(rules: [{ allow: private }])
  @key(name: "byCertificationRecord", fields: ["certificationRecordId"])
  @key(name: "bySubject", fields: ["subjectId"], queryField: "evalsBySubject") {
  id: ID!
  subject: User! @connection(fields: ["subjectId"])
  subjectId: ID!
  rater: User! @connection(fields: ["raterId"])
  raterId: ID!
  procedure: Procedure @connection(fields: ["procedureId"])
  procedureId: ID!
  evaluationDate: AWSDateTime!
  ratingLevel: Int
  certificationRecordId: ID
}

type CertificationRecord
  @model
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read] }
    ]
  )
  @key(name: "bySubjectProcedure", fields: ["subjectId", "procedureId"])
  @key(
    name: "bySubject"
    fields: ["subjectId"]
    queryField: "certRecordsBySubject"
  ) {
  id: ID!
  procedureId: ID!
  procedure: Procedure @connection(fields: ["procedureId"])
  isCertified: Boolean
  certificationMethod: CertificationMethod
  subjectId: ID!
  subject: User! @connection(fields: ["subjectId"])
  certificationLog: [EvaluationResponse]
    @connection(keyName: "byCertificationRecord", fields: ["id"])
  totalProcedureEvals: Int
}

type UserInvitation
  @model(mutations: { create: null })
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read] }
    ]
  )
  @key(name: "byEmail", fields: ["email"], queryField: "invitationsByEmail") {
  id: ID!
  orgID: ID!
  invitee: User! @connection(fields: ["inviteeId"])
  inviteeId: ID!
  invitationStatus: InvitationStatus!
  email: String!
  programAdminId: ID
  permission: Permission
}

type ProgramProcedure
  @model
  @auth(
    rules: [
      # Defaults to use the "owner" field.
      { allow: private, provider: userPools }
      # Next allow public access with an API Key
      { allow: public, provider: apiKey, operations: [read] }
    ]
  )
  @key(
    name: "byProgram"
    fields: ["programId"]
    queryField: "proceduresByProgram"
  )
  @key(name: "byProcedure", fields: ["procedureId", "programId"]) {
  id: ID!
  procedureId: ID!
  procedure: Procedure! @connection(fields: ["procedureId"])
  programId: ID!
  program: Program! @connection(fields: ["programId"])
}

# Correlates 1:1 with cognito user groups.
enum Permission {
  Users
  ProgramAdmins
  Admins
  Sysadmins
}

enum InvitationStatus {
  Started
  Notified
  Resolved
}

enum CertificationMethod {
  Manual
  CertificationRule
}

type CertificationRule {
  id: ID!
  organization: Organization
  program: Program
  numOfEvals: Int
  atLevel: Int
  procedure: Procedure
}

enum Role {
  User
  ProgramAdmin
  Admin
}

input CreateUserInvitationInput {
  id: ID
  inviteeId: ID!
  orgID: ID!
  programAdminId: ID
  invitationStatus: InvitationStatus!
  email: String!
  permission: Permission
}

input CreateEvaluationResponseInput {
  id: ID
  subjectId: ID!
  raterId: ID!
  procedureId: ID!
  evaluationDate: AWSDateTime!
  ratingLevel: Int
  certificationRecordId: ID
}

type Mutation {
  newUserInvitation(userInvitation: CreateUserInvitationInput): String
    @function(name: "newUserInvitation-${env}")
    @aws_cognito_user_pools
    @aws_api_key
}

type Query {
  newEvaluationResponse(
    evaluationResponse: CreateEvaluationResponseInput
  ): String
}
